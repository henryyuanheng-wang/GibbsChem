import numpy as np
from scipy.interpolate import InterpolatedUnivariateSpline 
import os,os.path
import re
from numpy.lib.recfunctions import append_fields
from Chempy.__init__ import localpath
if __name__=='__main__':
	
	"""These are net yields from Chieffi + Limongi 2017 (unpublished), downloaded from http://orfeo.iaps.inaf.it/"""
	
	datpath='/data/ohep2/ChempyScoring/Chempy/input/yields/CL17/'
	
	metallicities=[0.0134,0.00134,0.000134,0.0000134] # metallicities of [Fe/H]=[0,-1,-2,-3]
	rotations=[0,150,300] # initial rotational velocity in km/s
	masses=np.array([13,15,20,25,30,40,60,80,120])
	rotation_index=1 # choose 150 km/s rotations
		
	elements=['H','He','Li','Be','B','C','N','O','F','Ne','Na','Mg','Al','Si','P','S','Cl','Ar','K','Ca','Sc','Ti','V','Cr','Mn','Fe','Co','Ni','Cu','Zn','Ga','Ge','As','Se','Br','Kr','Rb','Sr','Y','Zr','Nb','Mo','Xe','Cs','Ba','La','Ce','Pr','Nd','Hg','Tl','Pb','Bi']
	LEN=len(elements)
	yield_table={}
	# Import full table with correct rows and data-types
	dt = np.dtype('U8,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8')
	for m,met in enumerate(metallicities):
		z = np.genfromtxt(datpath+'tab_yieldsnet_ele_exp.dec',skip_header=(m+rotation_index)*(LEN+1)+1,skip_footer=(m+rotation_index)*(LEN+1)+LEN+1,dtype=dt)
		additional_keys = ['Mass', 'mass_in_remnants','unprocessed_mass_in_winds'] # List of keys for table
		names = additional_keys + elements
			
		# Initialise table and arrays   
		base = np.zeros(len(masses))
		list_of_arrays = []
		for i in range(len(names)):
			list_of_arrays.append(base)
		yield_subtable = np.core.records.fromarrays(list_of_arrays,names=names)
		mass_in_remnants = np.zeros(len(masses))
		total_mass_fraction = np.zeros(len(masses))
		element_mass = np.zeros(len(masses))
		yield_subtable['Mass']=masses
		for e,el in enumerate(elements):
			for m_index in range(len(masses)):
				yield_subtable[el][m_index]=z[e][m_index+3]
		yield_table[met]=yield_subtable
	print(yield_table[0.0134]['H'])
			
			
	print('Complete')	
"""		
	# Define data types
	
	# Initialise yield table
	yield_table = {}

	
		
		
		
		
		# Create model dictionary indexed by metallicity, giving relevant model number for each choice of mass
		# See Frischknecht info_yields.txt file for model information
		model_dict = {}
		model_dict[0.0134] = [2,8,14,27]
		model_dict[1e-3]=[4,10,16,28]
		model_dict[1e-5]=[6,12,18,29]
		
		# Import list of remnant masses for each model (from row 32-60, column 6 of .txt file) 
		# NB: these are in solar masses
		rem_mass_table = np.loadtxt(localpath+'input/yields/Frischknecht16/yields_total.txt',skiprows=31,usecols=6)[:29]

		# Create one subtable for each metallicity 
		for metallicity in self.metallicities:
			additional_keys = ['Mass', 'mass_in_remnants','unprocessed_mass_in_winds'] # List of keys for table
			names = additional_keys + self.elements
			
			# Initialise table and arrays   
			base = np.zeros(len(self.masses))
			list_of_arrays = []
			for i in range(len(names)):
				list_of_arrays.append(base)
			yield_subtable = np.core.records.fromarrays(list_of_arrays,names=names)
			mass_in_remnants = np.zeros(len(self.masses))
			total_mass_fraction = np.zeros(len(self.masses))
			element_mass = np.zeros(len(self.masses))
			
			# Add masses to table
			yield_subtable['Mass'] = self.masses
		    
		    
			# Extract remnant masses (in solar masses) for each model:			
			for mass_index,model_index in enumerate(model_dict[metallicity]):
				mass_in_remnants[mass_index] = rem_mass_table[model_index-1] 
		   
		   # Iterate over all elements 
			for element in self.elements:
				element_mass = np.zeros(len(self.masses))
				for isotope in indexing[element]: # Iterate over isotopes of each element
					for mass_index,model_index in enumerate(model_dict[metallicity]): # Iterate over masses 
						for row in z: # Find required row in table 
							if row[0] == isotope:
								element_mass[mass_index]+=row[model_index] # Compute cumulative mass for all isotopes
				yield_subtable[element]=np.divide(element_mass,self.masses) # Add entry to subtable
		    
			all_fractions = [row[model_index] for row in z] # This lists all elements (not just up to Ge)
			total_mass_fraction[mass_index] = np.sum(all_fractions) # Compute total net mass fraction (sums to approximately 0)
			
			# Add fields for remnant mass (now as a mass fraction) and unprocessed mass fraction			
			yield_subtable['mass_in_remnants']=np.divide(mass_in_remnants,self.masses)                    
			yield_subtable['unprocessed_mass_in_winds'] = 1.-(yield_subtable['mass_in_remnants']+total_mass_fraction) # This is all mass not from yields/remnants
			
			# Add subtable to full table
			yield_table[metallicity]=yield_subtable

		# Define final yield table for output
		self.table = yield_table
"""
