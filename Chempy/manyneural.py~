def training_set():
	""" Function to create the training data-set for the neural network.
	This creates input vectors (logz,time_index) and output log10 abundances, in Neural/ folder
	"""
	import multiprocessing as mp
	import tqdm
	from .main import SSP_evolution
	
	z = np.power(10.,a.training_logz)
	
	# Initialise output	
	out_dat = np.zeros(a.time_steps)
	for i in range(len(out_dat)):
		out_dat[i] = []

	for i in range(len(z)):
		dat = SSP_evolution(z[i])
		for t in range(a.time_steps):
			out_dat[t].append(dat[t])
		
	
	
	# Define input data (metallicity and time) + rescale to [-1,1] range
	input_data = []	
	for logz_i in a.training_logz:
		for ti in time_index:
			#rescale_logz = 2.*(logz_i-np.mean((a.logmax,a.logmin)))/(a.logmax-a.logmin)
			#rescale_t = 2.*ti-1.
			input_data.append([logz_i,ti])	
	
	# Multiprocess output creation for speed
	p = mp.Pool()
	result = list(tqdm.tqdm(p.imap(create_set,z),total=len(z))) # Order IS important here
	p.close()
	p.join()	

	# Reformat result to match with input_data format
	output_data = []
	for z_index in range(len(z)):
		for time_step in range(a.time_steps):
			output_data.append(list(result[z_index][time_step]))	
	
	# Save results
	np.save('Neural/training_input.npy',input_data)
	np.save('Neural/training_output.npy',output_data)
	return None
	