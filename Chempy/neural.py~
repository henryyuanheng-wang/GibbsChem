def training_data():
	""" Function to create neural network training dataset for Chempy data. 

	We calculate a list of 5 trial values for each parameter about the prior, and create an array of all combinations.
	Trial values are chosen to be uniform in the Gaussian probability space (16.7,33.3, 50 percentile etc.)
	Gaussian widths (stored in parameter.py) are chosen to fully explore required parameter space
	Trial values normalized to unit Gaussians are created for neural network input	
	
	Outputs (stored in Neural/ as npy files):
		training_norm_grid - Input training dataset saved as normalized unit Gaussians
		training_param_grid - Input training dataset in parameter space
		training_abundances - Output training abundance data
		
	"""

	from Chempy.parameter import ModelParameters
	from Chempy.cem_function import posterior_function_returning_predictions
	import numpy as np
	from scipy.stats import norm as gaussian
	import os
	
	# FOR TESTING	
	import warnings
	warnings.filterwarnings("ignore")

	a = ModelParameters()
	
	N = a.training_size # No. data points per parameter
	widths = a.neural_widths # Gaussian widths for parameters	
	
	# Create 1d grid of data points equally spaced in probability space 
	prob = np.linspace(1/(N+1), 1-1/(N+1), N)
	grids = [gaussian.ppf(prob) for _ in range(N+1)] # Normalize to unit Gaussian
	norm_grid = np.array(np.meshgrid(*grids)).T.reshape(-1,N+1)
	
	# Create grid in parameter space
	param_grid = [item*widths+a.p0 for item in norm_grid]

	# Save grids
	directory = 'Neural/'
	if not os.path.exists(directory):
		os.makedirs(directory)
		
	np.save(directory+'training_norm_grid.npy',norm_grid)
	np.save(directory+'training_param_grid.npy',param_grid)
	
	## Create abundance output
	#param_grid = param_grid[:6] # For testing
	training_abundances = []
	for i,item in enumerate(param_grid):
		abundances,_ = posterior_function_returning_predictions((item,a))
		training_abundances.append(abundances)
		if i%100 == 0:
			print("Calculating abundance set %d of %d" %(i,len(param_grid)))
              
	# Save abundance table
	np.save(directory+'training_abundances.npy', training_abundances)

	return 0
	
